/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "icode.baidu.com/baidu/nxt-sim/paas-agent/pkg/api/kubeflow.org/v1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SimJobLister helps list SimJobs.
// All objects returned here must be treated as read-only.
type SimJobLister interface {
	// List lists all SimJobs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.SimJob, err error)
	// SimJobs returns an object that can list and get SimJobs.
	SimJobs(namespace string) SimJobNamespaceLister
	SimJobListerExpansion
}

// simJobLister implements the SimJobLister interface.
type simJobLister struct {
	indexer cache.Indexer
}

// NewSimJobLister returns a new SimJobLister.
func NewSimJobLister(indexer cache.Indexer) SimJobLister {
	return &simJobLister{indexer: indexer}
}

// List lists all SimJobs in the indexer.
func (s *simJobLister) List(selector labels.Selector) (ret []*v1.SimJob, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.SimJob))
	})
	return ret, err
}

// SimJobs returns an object that can list and get SimJobs.
func (s *simJobLister) SimJobs(namespace string) SimJobNamespaceLister {
	return simJobNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SimJobNamespaceLister helps list and get SimJobs.
// All objects returned here must be treated as read-only.
type SimJobNamespaceLister interface {
	// List lists all SimJobs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.SimJob, err error)
	// Get retrieves the SimJob from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.SimJob, error)
	SimJobNamespaceListerExpansion
}

// simJobNamespaceLister implements the SimJobNamespaceLister
// interface.
type simJobNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SimJobs in the indexer for a given namespace.
func (s simJobNamespaceLister) List(selector labels.Selector) (ret []*v1.SimJob, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.SimJob))
	})
	return ret, err
}

// Get retrieves the SimJob from the indexer for a given namespace and name.
func (s simJobNamespaceLister) Get(name string) (*v1.SimJob, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("simjob"), name)
	}
	return obj.(*v1.SimJob), nil
}
